# -*- coding: utf-8 -*-
"""py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12nYuLtSQByc3YVzPLaTOIY-tWGtlePzZ
"""

import seaborn as sns
import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from wordcloud import WordCloud
from collections import Counter
from matplotlib_venn import venn3
import plotly
import plotly.express as px
import matplotlib.pyplot as plt
sns.set_theme()



import os

# Create the directory if it doesn't exist
if not os.path.exists("temp/images"):
    os.makedirs("temp/images")

# 1.Numeric

df = pd.read_csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/6_SeveralNum.csv")
df.head()

numeric_cols = df.select_dtypes(include=['int', 'float'])
numeric_cols

columns = numeric_cols.columns
columns

# Freedman-Diaconis rule

# hist

for i in range(0, len(numeric_cols.columns)):
    sns.distplot(numeric_cols[columns[i]], kde=True)
    # save the fig to temp/images folder
    plt.savefig(f"temp/images/numeric_plot{i}.png")
    # plt.show()
    

# scatter

for i in range(0, len(numeric_cols.columns)):
    for j in range(0, len(numeric_cols.columns)):
        if i != j:
            sns.scatterplot(data=numeric_cols, x=numeric_cols.columns[i], y=numeric_cols.columns[j])
            # plt.show()
            # save the fig to temp/images folder
            plt.savefig(f"temp/images/scatter_plot{i}.png")

# 2d density (area)

for i in range(0, len(numeric_cols.columns)):
    for j in range(0, len(numeric_cols.columns)):
        if i != j:
            sns.kdeplot(data=numeric_cols, x=numeric_cols.columns[i], y=numeric_cols.columns[j], shade=True)
            # plt.show()
            # save the fig to temp/images folder
            plt.savefig(f"temp/images/2d_density_plot{i}.png")
           

# heatmap

fig, ax = plt.subplots(figsize=(20, 15), dpi=100)
sns.heatmap(numeric_cols, annot=True)


#boxplot

fig, ax = plt.subplots(figsize=(20, 20), dpi=100)
sns.boxplot(data=numeric_cols, orient="h")


fig, ax = plt.subplots(figsize=(12, 50), dpi=100)
sns.violinplot(data=numeric_cols, orient="h")


# correlogram

sns.pairplot(numeric_cols, kind="reg", diag_kind="kde")
# plt.show()
# save the fig to temp/images folder
plt.savefig(f"temp/images/correlogram_plot.png")

# 2. Categoric

numeric_cols

more_than_10 = [col for col in numeric_cols.columns if numeric_cols[col].nunique() > 10]

# move those columns to the end of the dataframe
df = numeric_cols[[col for col in numeric_cols.columns if col not in more_than_10] + more_than_10]

# save the index of the first moved column
first_moved_col = len(df.columns) - len(more_than_10)

first_moved_col

categoric = df

df

new_cols=[]
for col in numeric_cols.columns:
    if(len(set(numeric_cols[col]))<10):
        new_cols.append(col)

categoric = df.loc[:, new_cols]

# pie chart (if no. of cat >6)

for i in range(first_moved_col):
    value_counts = categoric[categoric.columns[i]].value_counts()

    # sort the value counts in descending order
    sorted_values = value_counts.sort_values(ascending=False)

    # create a list of labels in the desired order
    labels = sorted_values.index.tolist()
    if 'other' in labels:
        labels.remove('other')
        labels.append('other')

    plt.figure(figsize=(18,18))
    plt.pie(sorted_values.values, labels=labels, autopct='%1.1f%%', startangle=0)
    # plt.show()
    # save the fig to temp/images folder
    plt.savefig(f"temp/images/pie_plot{i}.png")

categoric['x']=['A', 'B', 'B', 'C', 'C', 'C']*5+['A','C']
categoric

url = "https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/14_SeveralIndepLists.csv"
data8 = pd.read_csv(url,sep=" ")
data8 = data8.dropna()

# horizontal , vertical

# determine plot orientation based on number of unique values
def get_orientation(col):
    if len(categoric[col].unique()) > 4:
        return 'h'
    else:
        return 'v'

# create separate bar plots for each column
for col in categoric.columns[:first_moved_col]:
    fig, ax = plt.subplots(figsize=(10, 5))
    
    orient = get_orientation(col)
    if orient == 'v':
        sns.countplot(data=categoric, x=col)
    else:
        sns.countplot(data=categoric, y=col)
    # plt.show()
    # save the fig to temp/images folder
    plt.savefig(f"temp/images/bar_plot{i}.png")

url = "https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/14_SeveralIndepLists.csv"
df = pd.read_csv(url,sep=" ")

# Loop through each column
for col in df.columns:
    # Check if the column contains strings
    if df[col].dtype == 'object':
        # Get the unique string values
        unique_strings = df[col].unique()
        # Check if there are more than 10 unique strings
        if len(unique_strings) > 10:
            # Concatenate all the string values
            all_strings = ' '.join(str(s) for s in unique_strings)
            # Generate the word cloud
            wordcloud = WordCloud(width=800, height=800, background_color='white').generate(all_strings)
            # Plot the word cloud
            plt.figure(figsize=(8, 8), facecolor=None)
            plt.imshow(wordcloud)
            
            plt.axis('off')
            plt.tight_layout(pad=0)
            # plt.show()
            # save the fig to temp/images folder
            plt.savefig(f"temp/images/wordcloud_plot{i}.png")

# Create a list of columns to omit (i.e., those with more than 6 unique values)
omit_cols = [col for col in categoric.columns if categoric[col].nunique() > 6]

# Filter the dataframe to exclude the omitted columns
df_filtered = categoric[[col for col in categoric.columns if col not in omit_cols]]

# Melt the dataframe to long format
df_melted = pd.melt(df_filtered, var_name='Column')

# Calculate the counts for each value in each column
count_df = df_melted.groupby(['Column', 'value']).size().reset_index(name='Count')

# Sort the counts in descending order
sorted_df = count_df.sort_values(['Column', 'Count'], ascending=[True, False])

# Create the grouped barplot
plt.figure(figsize=(25, 25))
sns.catplot(x='Count', y='Column', hue='value', data=sorted_df, kind='bar', height=6, aspect=2)

# Show the plot
# plt.show()
# save the fig to temp/images folder
plt.savefig(f"temp/images/grouped_bar_plot{i}.png")

